#!/bin/bash
# tshark macro table

_p="\033[;0;0;35m"
_o="\033[0m"

if [[ "$1" == "-c" ]];
then 
  curl https://ipinfo.io/$2
  exit
fi

svr="tourmaline"
echo -e "\033[;2;0;0;2m"
_env="$(uname -s)"
case "$_env" in 
  MINGW64*) echo "mingw64";;
  LINUX*)   netstat -uiltl;;
esac
echo -e "\033[0m"
echo -e "\033[0;1;35m"
echo -e "$svr:\n enter device to scan \033[;0;0;16m(must be root)\033[0m"
read _dev 
if [[ "$1" == "-h" ]];
then
  tshark -i "$_dev" -f "host $2" 
  exit
fi

if [[ "$1" == "-s" ]];
then
  tshark -i "$_dev" -z "flow,tcp,network"
fi

#FIXME: file output options

if [[ "$1" == "-tcp" ]];
then
  cho "scanning $2 $3"
  tshark -z "follow,tcp,hex,$2,$3" -T fields -e data -T json -x -P -V
  exit
fi

if [[ "$1" == "-udp" ]];
then 
  echo "scanning $2 -- $3"
  tshark -z "follow,udp,hex,$2,$3" -T fields -e data -T json -x -P -V
  exit
fi

if [[ "$1" == "-p" ]];
then
  netstat -aon | grep $2
  exit 0
fi

if [[ "$1" == "-n" ]]; 
then
  len=$(expr length $2)
  max=$(expr length "0.0.0.0")
  if [ $len -lt $max ]; then echo -e "$_p error: expecting ip <xx.xx.xx.0>$_o"; exit; fi; 
  str1=$2
  idr=$(($len-1))
  idi=${str1:$idr:$len}
  idn=.$idi
  echo $idn
  if [[ $idi -ne 0 ]]; then echo -e "$_p error: expecting ip <xx.xx.xx.0>$_o"; exit; fi;
  str0=`echo "$str1" | sed 's/$idn/.1/'`
  echo $str0;
  exit 
  for i in {1..254}; do
     str=$(echo str0 | sed 's/.$i/.$(($i+1))/')
     echo $str
  done  
  exit 0
fi
  
echo -e "shark [ OPTIONS ] [ ... ]"
echo -e "OPTIONS"
echo -e "-s  start scan"
echo -e "-tcp <hostname1:port> <hostname2:port>"
echo -e "-udp <hostname1:port> <hostname2:port>"
echo -e "     show content between host 1 & 2"
echo -e "-h   <hostname>"
echo -e "     filter by host"
echo -e "-c   <hostname>"
echo -e "     get hostname demographics"
echo -e "-p   <port>"
echo -e "     scan open ports n in hostname"
echo -e "-n   <subnet ip>"
echo -e "     scan all devices in subnet 'xx.xx.xx.0'"
